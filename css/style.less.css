@import 'reset/reset.css';
/**
 * Sets a translucent background color to all elements it affects. Helpful while setting up, or debugging, the structure of your site to make sure all items are cleared correctly.
 *
 * @param {color} [@bg=blue] - A color to be lightened, so make sure you pick a darkish color.
 *
 * @example
 *   section {
 *     .edit(red);
 *   }
 */
/**
 * Clearfix used to clear floated children elements. http://nicolasgallagher.com/micro-clearfix-hack
 *
 * @example
 *   .parent {
 *     .cf();
 *     .child {
 *       .column(1 of 2);
 *     }
 *   }
 */
/**
 * Horizontally center a container element and apply padding to it.
 *
 * @param {unit} [@max-size=980px] - A max-width to assign. Can be any unit.
 * @param {unit} [@pad=0] - Padding on the left and right of the element. Can be any unit.
 *
 * @example
 *   section {
 *     .center(900px);
 *   }
 */
/**
 * Vertically and/or horizontally align nested elements.
 *
 * @param {string} [@location=middle-center] - The position the nested element takes relative to the containing element.
 * @param {boolean} [@flex=false] - Whether align() will use Flexbox to perform centering or not. Options are false or flex (for readability).
 *
 * - reset
 * - top-left
 * - top-center or top
 * - top-right
 * - middle-left or left
 * - middle-right or right
 * - bottom-left
 * - bottom-center or bottom
 * - bottom-right
 *
 * @example
 *   .parent {
 *     .align();
 *     width: 600px;
 *     height: 400px;
 *     .child {
 *       width: 300px;
 *       height: 150px;
 *     }
 *   }
 */
/**
 * Creates a column that is a fraction of the size of it's containing element with a gutter. You don't need to pass any additional ratios (fractions) as the grid system will make use of calc(). Note that fractions must always be wrapped in quotes.
 *
 * @param {string} [@fraction=1 of 1] - This is a simple fraction of the containing element's width. This must be a string written as a fraction.
 * @param {number} [@cycle=extract(@fraction, 3)] - Lost works by assigning a margin-right to all elements except the last in the row. It does this by default by using the denominator of the fraction you pick. To override this default use this param. e.g. column(2 of 4, @cycle: 2)
 * @param {number} [@gut=@gutter] - The margin on the right side of the element used to create a gutter. Typically this is left alone and the global @gutter will be used, but you can override it here if you want certain elements to have a particularly large or small gutter (pass 0 for no gutter at all).
 *
 * @example
 *   figure {
 *     .column(1 of 3);
 *   }
 */
/**
 * Creates a row that is a fraction of the size of it's containing element with a gutter. You don't need to pass any additional ratios (fractions) as the grid system will make use of calc(). Note that fractions must always be wrapped in quotes.
 *
 * @param {string} [@fraction=1 of 1] - This is a simple fraction of the containing element's height. This must be a string written as a fraction.
 * @param {number} [@gut=@gutter] - The margin on the bottom of the element used to create a gutter. Typically this is left alone and the global @gutter will be used, but you can override it here if you want certain elements to have a particularly large or small gutter (pass 0 for no gutter at all).
 *
 * @example
 *   figure {
 *     .row(1 of 3);
 *   }
 */
/**
 * Creates a block that is a fraction of the size of it's containing element with a gutter on the right and bottom. You don't need to pass any additional ratios (fractions) as the grid system will make use of calc(). Note that fractions must always be wrapped in quotes.
 *
 * @param {string} [@fraction=1 of 1] - This is a simple fraction of the containing element's width/height. This must be a string written as a fraction.
 * @param {number} [@cycle=extract(@fraction, 3)] - Lost works by assigning a margin-right/bottom to all elements except the last row (no margin-bottom) and the last column (no margin-right). It does this by default by using the denominator of the fraction you pick. To override this default use this param. e.g. waffle(2 of 4, @cycle: 2)
 * @param {number} [@gut=@gutter] - The margin on the right and bottom side of the element used to create a gutter. Typically this is left alone and the global @gutter will be used, but you can override it here if you want certain elements to have a particularly large or small gutter (pass 0 for no gutter at all).
 *
 * @example
 *   figure {
 *     .waffle(1 of 3);
 *   }
 */
/**
 * Margin to the left, right, bottom, or top, of an element depending on if the fraction passed is positive or negative. It works for both horizontal and vertical grids but not both.
 *
 * @param {string} [@fraction=1 of 1] - Fraction of the container to be offset. Must be a string.
 * @param {string} [@dir=row] - Direction the grid is going. Should be the opposite of the column() or row() it's being used on.
 * @param {number} [@gut=@gutter] - How large the gutter involved is, typically this won't be adjusted, but if you have set the elements for that container to have different gutters than default, you will need to match that gutter here as well.
 *
 * @example
 *   .two-elements {
 *     .column(1 of 3);
 *     &:first-child {
 *       .offset(1 of 3);
 *     }
 *   }
 */
/**
 * Source ordering. Shift elements left, right, up, or down, by their left or top position by passing a positive or negative fraction.
 *
 * @param {string} [@fraction=1 of 1] - Fraction of the container to be shifted. Must be a string.
 * @param {string} [@dir=row] - Direction the grid is going. Should be the opposite of the column() or row() it's being used on.
 * @param {number} [@gut=@gutter] - Adjust the size of the gutter for this movement. Should match the element's @gut.
 *
 * @example
 *   figure {
 *     .column(1 of 2);
 *     &:first-child {
 *       .move(1 of 2);
 *     }
 *     &:last-child {
 *       .move(-1 of 2);
 *     }
 *   }
 */
/**
 * Creates a row element for working with JS masonry libraries like Isotope. Assigns a negative margin on each side of this wrapping element.
 *
 * @param {number} [@gut=@gutter] - How large the gutter involved is, typically this won't be adjusted and will inherit the global @gutter setting, but it's made available if you want your masonry grid to have a special @gut, it should match your masonry-column's @gut.
 *
 * @example
 *   section {
 *     .masonry-row();
 *   }
 *   figure {
 *     .masonrycolumn(1 of 3);
 *   }
 */
/**
 * Creates a column for working with JS masonry libraries like Isotope. Assigns a margin to each side of the element.
 *
 * @param {number} [@gut=@gutter] - How large the gutter involved is, typically this won't be adjusted and will inherit the global @gutter setting, but it's made available if you want your masonry grid to have a special @gut, it should match your masonry-row's @gut.
 *
 * @example
 *   section {
 *     .masonry-wrap();
 *   }
 *   figure {
 *     .masonry-column(1 of 3');
 *   }
 */
html {
  font-weight: bold;
  color: white;
  padding: 30px;
  height: auto;
}
header {
  text-align: center;
  margin: 30px 0 60px;
}
figure {
  height: 100px;
  line-height: 100px;
  text-align: center;
  margin-top: 15px;
  margin-bottom: 15px;
}
figure figure {
  margin-top: 0;
  margin-bottom: 0;
}
section {
  *zoom: 1;
  max-width: 1100px;
  margin: 30px auto;
}
section:before,
section:after {
  content: '';
  display: table;
}
section:after {
  clear: both;
}
section:last-of-type {
  margin-bottom: 0;
}
section:nth-of-type(1) {
  background: #42CAFD;
}
section:nth-of-type(1) figure {
  width: calc(99.99% * 1/1 - (30px - 30px * 1/1));
  background: #10bcfc;
}
section:nth-of-type(1) figure:nth-child(n) {
  margin-right: 30px;
  float: left;
  clear: none;
}
section:nth-of-type(1) figure:last-child {
  margin-right: 0;
}
section:nth-of-type(1) figure:nth-child(1n) {
  margin-right: 0;
  float: right;
}
section:nth-of-type(1) figure:nth-child(1n + 1) {
  clear: left;
}
@media (min-width: 500px) {
  section:nth-of-type(1) figure {
    width: calc(99.99% * 1/2 - (30px - 30px * 1/2));
  }
  section:nth-of-type(1) figure:nth-child(n) {
    margin-right: 30px;
    float: left;
    clear: none;
  }
  section:nth-of-type(1) figure:last-child {
    margin-right: 0;
  }
  section:nth-of-type(1) figure:nth-child(2n) {
    margin-right: 0;
    float: right;
  }
  section:nth-of-type(1) figure:nth-child(2n + 1) {
    clear: left;
  }
}
@media (min-width: 800px) {
  section:nth-of-type(1) figure {
    width: calc(99.99% * 1/3 - (30px - 30px * 1/3));
  }
  section:nth-of-type(1) figure:nth-child(n) {
    margin-right: 30px;
    float: left;
    clear: none;
  }
  section:nth-of-type(1) figure:last-child {
    margin-right: 0;
  }
  section:nth-of-type(1) figure:nth-child(3n) {
    margin-right: 0;
    float: right;
  }
  section:nth-of-type(1) figure:nth-child(3n + 1) {
    clear: left;
  }
}
@media (min-width: 1100px) {
  section:nth-of-type(1) figure {
    width: calc(99.99% * 1/4 - (30px - 30px * 1/4));
  }
  section:nth-of-type(1) figure:nth-child(n) {
    margin-right: 30px;
    float: left;
    clear: none;
  }
  section:nth-of-type(1) figure:last-child {
    margin-right: 0;
  }
  section:nth-of-type(1) figure:nth-child(4n) {
    margin-right: 0;
    float: right;
  }
  section:nth-of-type(1) figure:nth-child(4n + 1) {
    clear: left;
  }
}
section:nth-of-type(2) {
  background: #66B3BA;
}
section:nth-of-type(2) figure {
  width: calc(99.99% * 1/3 - (30px - 30px * 1/3));
  background: #4a9ca3;
}
section:nth-of-type(2) figure:nth-child(n) {
  margin-right: 30px;
  float: left;
  clear: none;
}
section:nth-of-type(2) figure:last-child {
  margin-right: 0;
}
section:nth-of-type(2) figure:nth-child(3n) {
  margin-right: 0;
  float: right;
}
section:nth-of-type(2) figure:nth-child(3n + 1) {
  clear: left;
}
section:nth-of-type(2) figure:first-child {
  margin-right: calc(99.99% * 1/3 - (30px - 30px * 1/3) + (30px * 2)) !important;
}
section:nth-of-type(3) {
  background: #8EB19D;
}
section:nth-of-type(3) figure {
  width: calc(99.99% * 1/3 - (30px - 30px * 1/3));
  background: #709c83;
}
section:nth-of-type(3) figure:nth-child(n) {
  margin-right: 30px;
  float: left;
  clear: none;
}
section:nth-of-type(3) figure:last-child {
  margin-right: 0;
}
section:nth-of-type(3) figure:nth-child(3n) {
  margin-right: 0;
  float: right;
}
section:nth-of-type(3) figure:nth-child(3n + 1) {
  clear: left;
}
section:nth-of-type(3) figure figure {
  width: calc(99.99% * 1/2 - (30px - 30px * 1/2));
  background: #59806a;
}
section:nth-of-type(3) figure figure:nth-child(n) {
  margin-right: 30px;
  float: left;
  clear: none;
}
section:nth-of-type(3) figure figure:last-child {
  margin-right: 0;
}
section:nth-of-type(3) figure figure:nth-child(2n) {
  margin-right: 0;
  float: right;
}
section:nth-of-type(3) figure figure:nth-child(2n + 1) {
  clear: left;
}
section:nth-of-type(4) {
  position: relative;
  background: #F0D2D1;
  height: 300px;
}
section:nth-of-type(4) > * {
  position: absolute;
  top: 50%;
  right: auto;
  bottom: auto;
  left: 50%;
  transform: translate3d(-50%, -50%, 0);
}
section:nth-of-type(4) figure {
  width: calc(99.99% * 1/3 - (30px - 30px * 1/3));
  background: #e3acab;
  margin-top: 0;
  margin-bottom: 0;
}
section:nth-of-type(4) figure:nth-child(n) {
  margin-right: 30px;
  float: left;
  clear: none;
}
section:nth-of-type(4) figure:last-child {
  margin-right: 0;
}
section:nth-of-type(4) figure:nth-child(3n) {
  margin-right: 0;
  float: right;
}
section:nth-of-type(4) figure:nth-child(3n + 1) {
  clear: left;
}
section:nth-of-type(5) {
  background: #F19A3E;
}
section:nth-of-type(5) figure {
  width: calc(99.99% * 1/1 - (30px - 30px * 1/1));
  height: auto;
  line-height: 25px;
  font-weight: normal;
  padding: 15px;
  background: #eb8111;
}
section:nth-of-type(5) figure:nth-child(n) {
  margin-right: 30px;
  float: left;
  clear: none;
}
section:nth-of-type(5) figure:last-child {
  margin-right: 0;
}
section:nth-of-type(5) figure:nth-child(1n) {
  margin-right: 0;
  float: right;
}
section:nth-of-type(5) figure:nth-child(1n + 1) {
  clear: left;
}
@media (min-width: 500px) {
  section:nth-of-type(5) figure {
    width: calc(99.99% * 2/4 - (30px - 30px * 2/4));
  }
  section:nth-of-type(5) figure:nth-child(n) {
    margin-right: 30px;
    float: left;
    clear: none;
  }
  section:nth-of-type(5) figure:last-child {
    margin-right: 0;
  }
  section:nth-of-type(5) figure:nth-child(2n) {
    margin-right: 0;
    float: right;
  }
  section:nth-of-type(5) figure:nth-child(2n + 1) {
    clear: left;
  }
}
@media (min-width: 800px) {
  section:nth-of-type(5) figure {
    width: calc(99.99% * 2/6 - (30px - 30px * 2/6));
  }
  section:nth-of-type(5) figure:nth-child(n) {
    margin-right: 30px;
    float: left;
    clear: none;
  }
  section:nth-of-type(5) figure:last-child {
    margin-right: 0;
  }
  section:nth-of-type(5) figure:nth-child(3n) {
    margin-right: 0;
    float: right;
  }
  section:nth-of-type(5) figure:nth-child(3n + 1) {
    clear: left;
  }
}
@media (min-width: 1100px) {
  section:nth-of-type(5) figure {
    width: calc(99.99% * 2/8 - (30px - 30px * 2/8));
  }
  section:nth-of-type(5) figure:nth-child(n) {
    margin-right: 30px;
    float: left;
    clear: none;
  }
  section:nth-of-type(5) figure:last-child {
    margin-right: 0;
  }
  section:nth-of-type(5) figure:nth-child(4n) {
    margin-right: 0;
    float: right;
  }
  section:nth-of-type(5) figure:nth-child(4n + 1) {
    clear: left;
  }
}
section:nth-of-type(6) {
  background: dodgerblue;
}
section:nth-of-type(6) figure {
  height: calc(99.99% * 1/3 - (30px - 30px * 1/3));
  margin-bottom: 30px;
  margin-top: 0;
  background: #0077ea;
  padding: 30px;
}
section:nth-of-type(6) figure:last-child {
  margin-bottom: 0;
}
section:nth-of-type(7) {
  background: tomato;
}
section:nth-of-type(7) figure {
  width: calc(99.99% * 1/3 - (30px - 30px * 1/3));
  height: calc(99.99% * 1/3 - (30px - 30px * 1/3));
  margin-bottom: 30px;
  margin-top: 0;
  background: #ff3814;
  line-height: inherit;
  padding: 30px;
}
section:nth-of-type(7) figure:nth-child(n) {
  float: left;
  margin-right: 30px;
  clear: none;
}
section:nth-of-type(7) figure:nth-child(3n),
section:nth-of-type(7) figure:last-child {
  margin-right: 0;
}
section:nth-of-type(7) figure:nth-child(3n + 1) {
  clear: left;
}
section:nth-of-type(7) figure:last-child {
  margin-bottom: 0;
}
section:nth-of-type(7) figure:nth-last-child(-n + 3) {
  margin-bottom: 0;
}
section:nth-of-type(8) {
  background: springgreen;
}
section:nth-of-type(8) figure {
  background: #00cc66;
}
section:nth-of-type(8) figure:first-child {
  width: calc(99.99% * 1/3 - (30px - 30px * 1/3));
}
section:nth-of-type(8) figure:first-child:nth-child(n) {
  margin-right: 30px;
  float: left;
  clear: none;
}
section:nth-of-type(8) figure:first-child:last-child {
  margin-right: 0;
}
section:nth-of-type(8) figure:first-child:nth-child(3n) {
  margin-right: 0;
  float: right;
}
section:nth-of-type(8) figure:first-child:nth-child(3n + 1) {
  clear: left;
}
section:nth-of-type(8) figure:last-child {
  width: calc(99.99% * 2/3 - (30px - 30px * 2/3));
}
section:nth-of-type(8) figure:last-child:nth-child(n) {
  margin-right: 30px;
  float: left;
  clear: none;
}
section:nth-of-type(8) figure:last-child:last-child {
  margin-right: 0;
}
section:nth-of-type(8) figure:last-child:nth-child(3n) {
  margin-right: 0;
  float: right;
}
section:nth-of-type(8) figure:last-child:nth-child(3n + 1) {
  clear: left;
}
section:nth-of-type(9) {
  background: cadetblue;
}
section:nth-of-type(9) figure {
  background: #4c7e80;
  width: calc(99.99% * 1/2 - (30px - 30px * 1/2));
}
section:nth-of-type(9) figure:nth-child(n) {
  margin-right: 30px;
  float: left;
  clear: none;
}
section:nth-of-type(9) figure:last-child {
  margin-right: 0;
}
section:nth-of-type(9) figure:nth-child(2n) {
  margin-right: 0;
  float: right;
}
section:nth-of-type(9) figure:nth-child(2n + 1) {
  clear: left;
}
@media (min-width: 800px) {
  section:nth-of-type(9) figure:first-child {
    position: relative;
    left: calc(99.99% * 1/2 - (30px - 30px * 1/2) + 30px);
  }
  section:nth-of-type(9) figure:last-child {
    position: relative;
    left: calc(99.99% * -1/2 - (30px - 30px * -1/2) + 30px);
  }
}
