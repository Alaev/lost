// Lost Grid v3.0.5 - https://github.com/corysimmons/lost

$gutter = 30px
$rtl = false


/**
 * Sets a translucent background color to all elements it affects. Helpful while setting up, or debugging, the structure of your site to make sure all items are cleared correctly.
 *
 * @param {color} [$bg=blue] - A color to be lightened, so make sure you pick a darkish color.
 *
 * @example
 *   section
 *     edit(red)
 */

edit($bg = blue)
  *
    background: rgba($bg, 10%)


/**
 * Clearfix used to clear floated children blocks. http://nicolasgallagher.com/micro-clearfix-hack
 *
 * @example
 *   .parent
 *     cf()
 *     .child
 *       block('1/2')
 */

cf()
  *zoom: 1
  &:before, &:after
    content: ''
    display: table
  &:after
    clear: both


/**
 * Horizontally center a container element and apply padding to it.
 *
 * @param {unit} [$max-size=980px] - A max-width to assign. Can be any unit.
 * @param {unit} [$pad=0] - Padding on the left and right of the element. Can be any unit.
 * @param {string} [$output=normal] - Determines what type of code to output. Accepts normal (outputs all code), init (only the code to initialize), and bare (just the max-width and padding). Useful for making classes like .center-large, .center-medium, .center-small.
 *
 * @example
 *   section
 *     center(900px)
 */

center($max-size = 980px, $pad = 0, $output = normal)
  if $output is normal or $output is init
    cf()
    margin-left: auto
    margin-right: auto
  if $output is normal or $output is bare
    max-width: $max-size
    padding-left: $pad
    padding-right: $pad


/**
 * Vertically and/or horizontally align nested elements.
 *
 * @param {string} [$dir=both] - Direction. Either vertical, v, horizontal, or h. Defaults to both.
 *
 * @example
 *   .parent
 *     align(vertical)
 *     width: 600px
 *     height: 400px
 *     .child
 *       width: 300px
 *       height: 150px
 */

align($dir = both)
  position: relative
  > *
    position: absolute
    transform-style: preserve-3d
    if ($dir == horizontal) or ($dir == h)
      left: 50%
      transform: translateX(-50%)
    else if ($dir == vertical) or ($dir == v)
      top: 50%
      transform: translateY(-50%)
    else if ($dir == reset)
      top: auto
      left: auto
      transform: translate(0, 0)
    else
      top: 50%
      left: 50%
      transform: translate(-50%, -50%)


/**
 * Creates a block that is a fraction of the size of it's containing element with a gutter. Think of this like a column except it can go vertical as well by setting $dir to 'column' or 'both'. You don't need to pass any additional ratios (fractions) as the grid system will make use of calc(). Note that fractions must always be wrapped in quotes.
 *
 * @param {string} [$fraction='1/1'] - This is a simple fraction of the containing element's width or height depending on $dir. This must be a string written as a fraction.
 * @param {string} [$dir=row] - The direction of the grid. Can be row (horizontal grid), column (vertical grid), or both (waffle grid).
 * @param {number} [$cycle=1] - Lost works by assigning a margin-right to all elements except the last in the row. It does this by default by using the denominator of the fraction you pick. To override this default use this param.
 * @param {number} [$gut=$gutter] - The margin on the side of the element used to create a gutter. Typically this is left alone and the global $gutter will be used, but you can override it here if you want certain elements to have a particularly large or small gutter (pass 0 for no gutter at all).
 * @param {string} [$output=normal] - Determines what type of code to output. Accepts normal (all styles for a block), init (the initial styles of any block), or bare (just the width of the block). Useful for creating CSS grid classes like .col-x with Lost.
 * @param {boolean} [$masonry-friendly=false] - Dictates whether this particular group of elements will work well with JS masonry plugins. This will assign a margin on each side of the element and you will need to wrap this group of elements in a masonry-row().
 *
 * @example
 *   figure
 *     block('1/3')
 */

block($fraction = '1/1', $dir = row, $cycle = 1, $gut = $gutter, $output = normal, $masonry-friendly = false)

  $denominator = unquote(split('/', $fraction)[1])

  if $dir is row
    if $output is normal or $output is init
      if $rtl
        float: right
      else
        float: left
      if $masonry-friendly is false
        if $rtl
          &:nth-child(n)
            float: right
            margin-left: $gut
          if $cycle != 1
            &:nth-child({$cycle}n)
              margin-left: 0
              float: left
          else
            &:nth-child({$denominator}n)
              margin-left: 0
              float: left
        else
          &:nth-child(n)
            float: left
            margin-right: $gut
          if $cycle != 1
            &:nth-child({$cycle}n)
              margin-right: 0
              float: right
          else
            &:nth-child({$denominator}n)
              margin-right: 0
              float: right
      else
        margin-left: ($gut / 2)
        margin-right: ($gut / 2)
      &:last-child
        margin-right: 0
      &:nth-child(n)
        clear: none
      if $cycle != 1
        &:nth-child({$cycle}n + 1)
          clear: both
      else
        &:nth-child({$denominator}n + 1)
          clear: both
    if $output is normal or $output is bare
      if $masonry-friendly is false
        if $gut != 0
          if $cycle != 1
            width: s('calc(99.999% * %s - (%s - %s / %s))', unquote($fraction), $gut, $gut, $cycle)
          else
            width: s('calc(99.999% * %s - (%s - %s / %s))', unquote($fraction), $gut, $gut, $denominator)
        else
          width: s('calc(99.999% * %s)', unquote($fraction))
      else
        if $gut != 0
          width: s('calc(99.999% * %s - %s)', unquote($fraction), $gut)
        else
          width: s('calc(99.999% * %s)', unquote($fraction))

  if $dir is column
    if $output is normal or $output is init
      margin-bottom: $gut
      &:last-child
        margin-bottom: 0
    if $output is normal or $output is bare
      if $gut != 0
        height: s('calc(99.999% * %s - (%s - %s / %s))', unquote($fraction), $gut, $gut, $denominator)
      else
        height: s('calc(99.999% * %s)', unquote($fraction))

  if $dir is both
    if $output is normal or $output is init
      margin-bottom: $gut
      &:last-child
        margin-right: 0
        margin-bottom: 0
      &:nth-child(n)
        clear: none
      if $cycle != 1
        &:nth-child({$cycle}n + 1)
          clear: both
      else
        &:nth-last-child(-n + {$denominator})
          margin-bottom: 0
        &:nth-child({$denominator}n + 1)
          clear: both
      if $rtl
        float: right
        margin-left: $gut
        if $cycle != 1
          &:nth-child({$cycle}n)
            margin-left: 0
            float: left
        else
          &:nth-child({$denominator}n)
            margin-left: 0
            float: left
      else
        float: left
        margin-right: $gut
        if $cycle != 1
          &:nth-child({$cycle}n)
            margin-right: 0
            float: right
        else
          &:nth-child({$denominator}n)
            margin-right: 0
            float: right
    if $output is normal or $output is bare
      if $gut != 0
        if $cycle != 1
          width: s('calc(99.999% * %s - (%s - %s / %s))', $fraction, $gut, $gut, $cycle)
        else
          width: s('calc(99.999% * %s - (%s - %s / %s))', unquote($fraction), $gut, $gut, $denominator)
        height: s('calc(99.999% * %s - (%s - %s / %s))', unquote($fraction), $gut, $gut, $denominator)
      else
        width: s('calc(99.999% * %s)', unquote($fraction))
        height: s('calc(99.999% * %s)', unquote($fraction))


/**
 * Creates a row element for working with JS masonry libraries like Isotope. Assigns a negative margin on each side of this wrapping element.
 *
 * @param {number} [$gut=$gutter] - How large the gutter involved is, typically this won't be adjusted and will inherit the global $gutter setting, but it's made available if you want your masonry grid to have a special $gut, it should match your blocks' $guts.
 *
 * @example
 *   section
 *     masonry-row()
 *   figure
 *     block('1/3', $masonry-friendly: true)
 */

masonry-row($gut = $gutter)
  cf()
  margin-left: -($gut / 2)
  margin-right: -($gut / 2)
  if $gut is not 0
    width: s('calc(99.999% + %s)', $gut)
  else
    width: 99.999%


/**
 * Margin to the left, right, bottom, or top, of an element depending on if the fraction passed is positive or negative. It works for both horizontal and vertical grids but not both. On vertical grids, the margin-top will create a gap on the bottom of the containing element the size of the margin-top. To get past this, apply overflow-y: hidden to your containing element.
 *
 * @param {string} [$fraction='1/1'] - Fraction of the container to be offset. Must be a string.
 * @param {string} [$dir=row] - Direction the grid is going. Should match the block() it's being used on.
 * @param {number} [$gut=$gutter] - How large the gutter involved is, typically this won't be adjusted, but if you have set the blocks for that row to have different gutters than default, you will need to match that gutter here as well.
 * @param {boolean} [$masonry-friendly=false] - Determines whether this offset will work well with masonry friendly grids.
 *
 * @example
 *   .two-elements
 *     block('1/3')
 *     &:first-child
 *       offset('1/3')
 */

offset($fraction = '1/1', $dir = row, $gut = $gutter, $masonry-friendly = false)

  $numerator = unquote(split('/', $fraction)[0])
  $denominator = unquote(split('/', $fraction)[1])

  if $dir is row
    if $gut > 0
      if $numerator > 0
        if $masonry-friendly
          margin-left: s('calc(99.999% * %s + (%s / 2))', unquote($fraction), $gut)
        else
          margin-left: s('calc(99.999% * %s - (%s - %s / %s) + %s)', unquote($fraction), $gut, $gut, $denominator, $gut)
      if $numerator < 0
        $fraction = split('-', $fraction)[1]
        if $masonry-friendly
          margin-right: s('calc(99.999% * %s + (%s / 2))', unquote($fraction), $gut)
        else
          margin-right: s('calc(99.999% * %s - (%s - %s / %s) + (%s * 2))', unquote($fraction), $gut, $gut, $denominator, $gut)
    if $gut is 0
      if $numerator > 0
        margin-left: s('calc(99.999% * %s)', unquote($fraction))
      if $numerator < 0
        margin-right: s('calc(-99.999% * %s)', unquote($fraction))

  if $dir is column
    if $gut > 0
      if $numerator > 0
        margin-bottom: s('calc(100vh * %s - (0px - %s / %s) + %s)', unquote($fraction), $gut, $denominator, $gut)
      if $numerator < 0
        $fraction = split('-', $fraction)[1]
        margin-top: s('calc(100vh * %s - (0px - %s / %s))', unquote($fraction), $gut, $denominator)
    if $gut is 0
      if $numerator > 0
        margin-bottom: s('calc(100vh * %s)', unquote($fraction))
      if $numerator < 0
        margin-top: s('calc(-100vh * %s)', unquote($fraction))


/**
 * Source ordering. Shift elements left or right by their left position. Not very happy with this implementation: https://github.com/corysimmons/lost/issues/33
 *
 * @param {string} [$fraction='1/1'] - Fraction of the container to be shifted. Must be a string.
 * @param {number} [$spots=1] - Number of spots to shift. So if you have 1/3 and shift it 2 spots to the right, it will end up on the 3/3 location. Can be negative. You might need to tweak these a bit for various sized objects.
 * @param {number} [$cycle=1] - If you have elements of unequal width, you can pass the number of items in the row to the $cycle param to help with the mathz involved.
 * @param {number} [$gut=$gutter] - Adjust the size of the gutter for this movement. Should match the block's $gut.
 * @param {string} [$output=normal] - Determines the type of output to produce. Accepts 3 options, normal (all the code), init (just the initialization code), and bare (just the left offset).
 *
 * @example
 *   figure
 *     block('1/3')
 *     move('1/3')
 */

move($fraction = '1/1', $spots = 1, $cycle = 1, $gut = $gutter, $output = normal)

  $denominator = unquote(split('/', $fraction)[1])

  if $output is normal or $output is init
    position: relative
  if $output is normal or $output is bare
    if $cycle != 1
      left: s('calc(%s * (99.999% * %s - (%s - %s / %s) + %s))', $spots, unquote($fraction), $gut, $gut, $cycle, $gut)
    else
      left: s('calc(%s * (99.999% * %s - (%s - %s / %s) + %s))', $spots, unquote($fraction), $gut, $gut, $denominator, $gut)


html, body
  height: 100%
