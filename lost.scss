// Lost Grid v3.0.1 - https://github.com/corysimmons/lost

$gutter: 30px !default;
$rtl: false !default;


/// Sets a translucent background color to all elements it affects. Helpful while setting up, or debugging, the structure of your site to make sure all items are cleared correctly.
///
/// @param {color} $bg [blue] - A color to be lightened, so make sure you pick a darkish color.
///
/// @example
///   section {
///     @include edit(red);
///   }

@mixin edit($bg: blue) {
  * {
    background: rgba($bg, 0.1);
  }
}


/// Clearfix used to clear floated children blocks. http://nicolasgallagher.com/micro-clearfix-hack
///
/// @example
///   .parent {
///     @include cf;
///     .child {
///       @include block('1/2');
///     }
///   }

@mixin cf() {
  *zoom: 1;

  &:before, &:after {
    content: '';
    display: table;
  }

  &:after {
    clear: both;
  }
}


/// Vertically and/or horizontally align nested elements.
///
/// @param {string} $dir [both] - Direction. Either vertical, v, horizontal, or h. Defaults to both.
///
/// @example
///   .parent {
///     @include align(vertical);
///     width: 600px;
///     height: 400px;
///     .child {
///       width: 300px;
///       height: 150px;
///     }
///   }

@mixin align($dir: both) {
  position: relative;
  > * {
    position: absolute;
    transform-style: preserve-3d;

    @if ($dir == 'horizontal') or ($dir == 'h') {
      left: 50%;
      transform: translateX(-50%);
    } @else if ($dir == 'vertical') or ($dir == 'v') {
      top: 50%;
      transform: translateY(-50%);
    } @else if ($dir == 'reset') {
      top: auto;
      left: auto;
      transform: translate(0, 0);
    } @else {
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
  }
}


/// Sass can't split strings natively. Thanks to @HugoGiraudel for https://github.com/at-import/SassyLists
///
/// @access private

@function sl-explode($string, $delimiter: '', $separator: "space") {
  @if type-of($string) != "string" {
    @warn "`sl-explode` function expecting a string; #{type-of($string)} given.";
    @return null;
  }
  @if type-of($delimiter) != "string" {
    @warn "`sl-explode` function expecting a string; #{type-of($delimiter)} given.";
    @return null;
  }
  $result: ();
  $length: str-length($string);
  @if not index("space" "comma", $separator) {
    $separator: "space";
  }
  @if str-length($delimiter) == 0 {
    @for $i from 1 through $length {
      $result: append($result, str-slice($string, $i, $i));
    }
    @return $result;
  }
  $running: true;
  $remaining: $string;
  @while $running {
    $index: str-index($remaining, $delimiter);
    @if not $index {
      $running: false;
    }
    @else {
      $slice: str-slice($remaining, 1, $index - 1);
      $result: append($result, $slice, $separator);
      $remaining: str-slice($remaining, $index + str-length($delimiter));
    }
  }
  @return append($result, $remaining, $separator);
}


/// Creates a block that is a fraction of the size of it's containing element with a gutter. Think of this like a column except it can go vertical as well by setting $dir to 'column' or 'both'. You don't need to pass any additional ratios (fractions) as the grid system will make use of calc(). Note that fractions must always be wrapped in quotes.
///
/// @param {string} $fraction ['1/1'] - This is a simple fraction of the containing element's width or height depending on $dir. This must be a string written as a fraction.
/// @param {string} $dir [row] - The direction of the grid. Can be row (horizontal grid), column (vertical grid), or both (waffle grid).
/// @param {number} $cycle [1] - Lost works by assigning a margin-right to all elements except the last in the row. It does this by default by using the denominator of the fraction you pick. To override this default use this param.
/// @param {number} $gut [$gutter] - The margin on the side of the element used to create a gutter. Typically this is left alone and the global $gutter will be used, but you can override it here if you want certain elements to have a particularly large or small gutter (pass 0 for no gutter at all).
/// @param {string} $output [normal] - Determines what type of code to output. Accepts normal (all styles for a block), init (the initial styles of any block), or bare (just the width of the block). Useful for creating CSS grid classes like .col-x with Lost.
/// @param {boolean} $masonry-friendly [false] - Dictates whether this particular group of elements will work well with JS masonry plugins. This will assign a margin on each side of the element and you will need to wrap this group of elements in a masonry-row().
///
/// @example
///   figure {
///     @include block('1/3');
///   }

@mixin block($fraction: '1/1', $dir: row, $cycle: 1, $gut: $gutter, $output: normal, $masonry-friendly: false) {

  $denominator: nth(sl-explode($fraction, '/'), 2);

  @if ($dir == row) {
    @if ($output == normal) or ($output == init) {

      @if $rtl {
        float: right;
      } @else {
        float: left;
      }

      @if ($masonry-friendly is false) {
        @if $rtl {
          &:nth-child(n) {
            float: right;
            margin-left: $gut;
          }
          @if ($cycle != 1) {
            &:nth-child(#{$cycle}n) {
              margin-left: 0;
              float: left;
            }
          } @else {
            &:nth-child(#{$denominator}n) {
              margin-left: 0;
              float: left;
            }
          }
        } @else {
          &:nth-child(n) {
            float: left;
            margin-right: $gut;
          }
          @if ($cycle != 1) {
            &:nth-child(#{$cycle}n) {
              margin-right: 0;
              float: right;
            }
          } @else {
            &:nth-child(#{$denominator}n) {
              margin-right: 0;
              float: right;
            }
          }
        }
      } @else {
        margin-left: ($gut / 2);
        margin-right: ($gut / 2);
      }

      &:last-child {
        margin-right: 0;
      }

      &:nth-child(n) {
        clear: none;
      }

      @if ($cycle != 1) {
        &:nth-child(#{$cycle}n + 1) {
          clear: both;
        }
      } @else {
        &:nth-child(#{$denominator}n + 1) {
          clear: both;
        }
      }

    }

    @if ($output == normal) or ($output == bare) {

      @if ($masonry-friendly == false) {
        @if ($gut != 0) {
          @if ($cycle != 1) {
            width: calc(100% * #{$fraction} - (#{$gut} - #{$gut} / #{$cycle}));
          } @else {
            width: calc(100% * #{$fraction} - (#{$gut} - #{$gut} / #{$denominator}));
          }
        } @else {
          width: calc(100% * #{$fraction});
        }

      } @else {
        @if ($gut != 0) {
          width: calc(100% * #{$fraction} - #{$gut});
        } @else {
          width: calc(100% * #{$fraction});
        }
      }
    }
  }

  @if ($dir == column) {

    @if ($output == normal) or ($output == init) {
      margin-bottom: $gut;
      &:last-child {
        margin-bottom: 0;
      }
    }

    @if ($output == normal) or ($output == bare) {
      @if ($gut != 0) {
        height: calc(100% * #{$fraction} - (#{$gut} - #{$gut} / #{$denominator}));
      } @else {
        height: calc(100% * #{$fraction});
      }
    }
  }

  @if ($dir == both) {

    @if ($output == normal) or ($output == init) {

      margin-bottom: $gut;

      &:last-child {
        margin-right: 0;
        margin-bottom: 0;
      }

      &:nth-child(n) {
        clear: none;
      }

      @if ($cycle != 1) {
        &:nth-child(#{$cycle}n + 1) {
          clear: both;
        }
      } @else {
        &:nth-last-child(-n + #{$denominator}) {
          margin-bottom: 0;
        }
        &:nth-child(#{$denominator}n + 1) {
          clear: both;
        }
      }

      @if ($rtl) {
        float: right;
        margin-left: $gut;
        @if ($cycle != 1) {
          &:nth-child(#{$cycle}n) {
            margin-left: 0;
            float: left;
          }
        } @else {
          &:nth-child(#{$denominator}n) {
            margin-left: 0;
            float: left;
          }
        }
      } @else {
        float: left;
        margin-right: $gut;
        @if ($cycle != 1) {
          &:nth-child(#{$cycle}n) {
            margin-right: 0;
            float: right;
          }
        } @else {
          &:nth-child(#{$denominator}n) {
            margin-right: 0;
            float: right;
          }
        }
      }
    }

    @if ($output == normal) or ($output == bare) {
      @if ($gut != 0) {
        @if ($cycle != 1) {
          width: calc(100% * #{$fraction} - (#{$gut} - #{$gut} / #{$cycle}));
        } @else {
          width: calc(100% * #{$fraction} - (#{$gut} - #{$gut} / #{$denominator}));
        }
        height: calc(100% * #{$fraction} - (#{$gut} - #{$gut} / #{$denominator}));
      } @else {
        width: calc(100% * #{$fraction});
        height: calc(100% * #{$fraction});
      }
    }
  }
}


/// Creates a row element for working with JS masonry libraries like Isotope. Assigns a negative margin on each side of this wrapping element.
///
/// @param {number} $gut [$gutter] - How large the gutter involved is, typically this won't be adjusted and will inherit the global $gutter setting, but it's made available if you want your masonry grid to have a special $gut, it should match your blocks' $guts.
///
/// @example
///   section {
///     @include masonry-row;
///   }
///   figure {
///     @include block('1/3', $masonry-friendly: true);
///   }

@mixin masonry-row($gut: $gutter) {
  @include cf;
  margin-left: -($gut / 2);
  margin-right: -($gut / 2);
  @if ($gut != 0) {
    width: calc(100% + #{$gut});
  } @else {
    width: 100%;
  }
}


/// Sass can't figure out what a number is. Thanks to @HugoGiraudel for http://hugogiraudel.com/2014/01/15/sass-string-to-number
///
/// @access private

@function _length($number, $unit) {
  $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';
  $units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;
  $index: index($strings, $unit);
  @if not $index {
    @warn "Unknown unit `#{$unit}`.";
    @return false;
  }
  @return $number * nth($units, $index);
}


/// @access private

@function number($string) {
  $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
  $numbers:  0   1   2   3   4   5   6   7   8   9;
  $result: 0;
  $divider: 0;
  $minus: false;
  @for $i from 1 through str-length($string) {
    $character: str-slice($string, $i, $i);
    $index: index($strings, $character);
    @if $character == '-' {
      $minus: true;
    }
    @else if $character == '.' {
      $divider: 1;
    }
    @else {
      @if not $index {
        $result: if($minus, $result * -1, $result);
        @return _length($result, str-slice($string, $i));
      }
      $number: nth($numbers, $index);
      @if $divider == 0 {
        $result: $result * 10;
      }
      @else {
        $divider: $divider * 10;
        $number: $number / $divider;
      }
      $result: $result + $number;
    }
  }
  @return if($minus, $result * -1, $result);
}


/// Margin to the left, right, bottom, or top, of an element depending on if the fraction passed is positive or negative. It works for both horizontal and vertical grids but not both. On vertical grids, the margin-top will create a gap on the bottom of the containing element the size of the margin-top. To get past this, apply overflow-y: hidden to your containing element.
///
/// @param {string} $fraction ['1/1'] - Fraction of the container to be offset. Must be a string.
/// @param {string} $dir [row] - Direction the grid is going. Should match the block() it's being used on.
/// @param {number} $gut [$gutter] - How large the gutter involved is, typically this won't be adjusted, but if you have set the blocks for that row to have different gutters than default, you will need to match that gutter here as well.
/// @param {boolean} $masonry-friendly [false] - Determines whether this offset will work well with masonry friendly grids.
///
/// @example
///   .two-elements {
///     @include block('1/3');
///     &:first-child {
///       @include offset('1/3');
///     }
///   }

@mixin offset($fraction: '1/1', $dir: row, $gut: $gutter, $masonry-friendly: false) {

  $numerator: number(nth(sl-explode($fraction, '/'), 1));
  $denominator: number(nth(sl-explode($fraction, '/'), 2));

  @if ($dir == row) {
    @if ($gut > 0) {
      @if ($numerator > 0) {
        @if ($masonry-friendly) {
          margin-left: calc(100% * #{$fraction} + (#{$gut} / 2));
        } @else {
          margin-left: calc(100% * #{$fraction} - (#{$gut} - #{$gut} / #{$denominator}) + #{$gut});
        }
      }
      @if ($numerator < 0) {
        $fraction: nth(sl-explode($fraction, '-'), 2);
        @if ($masonry-friendly) {
          margin-right: calc(100% * #{$fraction} + (#{$gut} / 2));
        } @else {
          margin-right: calc(100% * #{$fraction} - (#{$gut} - #{$gut} / #{$denominator}) + (#{$gut} * 2));
        }
      }
    }
    @if ($gut == 0) {
      @if ($numerator > 0) {
        margin-left: calc(100% * #{$fraction});
      }
      @if ($numerator < 0) {
        margin-right: calc(-100% * #{$fraction});
      }
    }
  }

  @if ($dir == column) {
    @if ($gut > 0) {
      @if ($numerator > 0) {
        margin-bottom: calc(100vh * #{$fraction} - (0px - #{$gut} / #{$denominator}) + #{$gut});
      }
      @if ($numerator < 0) {
        $fraction: nth(sl-explode($fraction, '-'), 2);
        margin-top: calc(100vh * #{$fraction} - (0px - #{$gut} / #{$denominator}));
      }
    }
    @if ($gut == 0) {
      @if ($numerator > 0) {
        margin-bottom: calc(100vh * #{$fraction});
      }
      @if ($numerator < 0) {
        margin-top: calc(-100vh * #{$fraction});
      }
    }
  }
}


html, body {
  height: 100%;
}
